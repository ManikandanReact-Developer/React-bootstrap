{"version":3,"sources":["DataList.js","App.js","reportWebVitals.js","index.js"],"names":["DataList","useState","userList","setUserList","MyExportCSV","CSVExport","ExportCSVButton","props","className","onClick","onExport","columns","dataField","text","sort","filter","textFilter","pagination","paginationFactory","page","sizePerPage","lastPageText","firstPageText","nextPageText","prePageText","showTotal","alwaysShowAllBtns","onPageChange","console","log","onSizePerPageChange","useEffect","fetch","then","response","json","result","Error","error","keyField","data","exportCSV","Fragment","csvProps","filterFactory","baseProps","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4SAUe,SAASA,IACtB,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAOMC,GAFsBC,YAApBC,gBAEY,SAACC,GAInB,OACE,8BACE,yBAAQC,UAAU,kBAAkBC,QALpB,WAClBF,EAAMG,YAIJ,UACG,IADH,uBAUAC,EAAU,CACd,CAAEC,UAAW,KAAMC,KAAM,MACzB,CAAED,UAAW,OAAQC,KAAM,OAAQC,MAAM,EAAMC,OAAQC,wBACvD,CACEJ,UAAW,WACXC,KAAM,WACNC,MAAM,EACNC,OAAQC,wBAEV,CAAEJ,UAAW,QAASC,KAAM,QAASC,MAAM,EAAMC,OAAQC,yBAKrDC,EAAaC,IAAkB,CACnCC,KAAM,EACNC,YAAa,EACbC,aAAc,KACdC,cAAe,KACfC,aAAc,IACdC,YAAa,IACbC,WAAW,EACXC,mBAAmB,EACnBC,aAAc,SAAUR,EAAMC,GAC5BQ,QAAQC,IAAI,OAAQV,GACpBS,QAAQC,IAAI,cAAeT,IAE7BU,oBAAqB,SAAUX,EAAMC,GACnCQ,QAAQC,IAAI,OAAQV,GACpBS,QAAQC,IAAI,cAAeT,MAc/B,OATAW,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAYjC,EAAYiC,MAC7BH,MAAK,SAACI,GAAD,OAAWT,QAAQU,MAAMD,QAChC,IAMD,8BACE,cAAC,IAAD,CACEE,SAAS,KACTC,KAAMtC,EACNS,QAASA,EACT8B,WAAS,EAJX,SAMG,SAAClC,GAAD,OACC,eAAC,IAAMmC,SAAP,WACE,cAACtC,EAAD,eAAiBG,EAAMoC,WAEvB,cAAC,IAAD,aAKE1B,WAAYA,EACZF,OAAQ6B,OACJrC,EAAMsC,oBCjFTC,MAZf,WACE,OACE,qBAAKtC,UAAU,MAAf,SAGG,cAACR,EAAD,OCGQ+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.7616e0b2.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nimport \"react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css\";\r\nimport \"react-bootstrap-table2-filter/dist/react-bootstrap-table2-filter.min.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport filterFactory, { textFilter } from \"react-bootstrap-table2-filter\";\r\nimport ToolkitProvider, { CSVExport } from \"react-bootstrap-table2-toolkit\";\r\n\r\nexport default function DataList() {\r\n  const [userList, setUserList] = useState([]);\r\n\r\n\r\n\r\n  //Export to CSV File\r\n  const { ExportCSVButton } = CSVExport;\r\n\r\n  const MyExportCSV = (props) => {\r\n    const handleClick = () => {\r\n      props.onExport();\r\n    };\r\n    return (\r\n      <div>\r\n        <button className=\"btn btn-success\" onClick={handleClick}>\r\n          {\" \"}\r\n          Export to CSV\r\n        </button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n\r\n  //Column Filter & sorting\r\n  const columns = [\r\n    { dataField: \"id\", text: \"id\" },\r\n    { dataField: \"name\", text: \"Name\", sort: true, filter: textFilter() },\r\n    {\r\n      dataField: \"username\",\r\n      text: \"Username\",\r\n      sort: true,\r\n      filter: textFilter(),\r\n    },\r\n    { dataField: \"email\", text: \"Email\", sort: true, filter: textFilter() },\r\n  ];\r\n\r\n\r\n  //pagination\r\n  const pagination = paginationFactory({\r\n    page: 1,\r\n    sizePerPage: 4,\r\n    lastPageText: \">>\",\r\n    firstPageText: \"<<\",\r\n    nextPageText: \">\",\r\n    prePageText: \"<\",\r\n    showTotal: true,\r\n    alwaysShowAllBtns: true,\r\n    onPageChange: function (page, sizePerPage) {\r\n      console.log(\"page\", page);\r\n      console.log(\"sizePerpage\", sizePerPage);\r\n    },\r\n    onSizePerPageChange: function (page, sizePerPage) {\r\n      console.log(\"page\", page);\r\n      console.log(\"sizePerPage\", sizePerPage);\r\n    },\r\n  });\r\n\r\n  //Fatch Api \r\n  useEffect(() => {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => response.json())\r\n      .then((result) => setUserList(result))\r\n      .then((Error) => console.error(Error));\r\n  }, []);\r\n\r\n\r\n\r\n  return (\r\n\r\n    <div>\r\n      <ToolkitProvider\r\n        keyField=\"id\"\r\n        data={userList}\r\n        columns={columns}\r\n        exportCSV\r\n      >\r\n        {(props) => (\r\n          <React.Fragment>\r\n            <MyExportCSV {...props.csvProps} />\r\n\r\n            <BootstrapTable\r\n              /*  bootstrap4 \r\n              keyField='id'\r\n              columns={columns}\r\n              data = {userList} */\r\n              pagination={pagination}\r\n              filter={filterFactory()}\r\n              {...props.baseProps}\r\n            />\r\n          </React.Fragment>\r\n        )}\r\n      </ToolkitProvider>\r\n\r\n\r\n      \r\n      {/*\r\n      \r\n      basic bootstrap \r\n      ----- ------\r\n      <table>\r\n        <tr>\r\n          <th>Id</th>\r\n          <th>Name</th>\r\n          <th>UserName</th>\r\n          <th>Email</th>\r\n        </tr>\r\n        {userList && userList.length > 0\r\n          ? userList.map((usr) => (\r\n              <tr>\r\n                <td>{usr.id}</td>\r\n                <td>{usr.name}</td>\r\n                <td>{usr.username}</td>\r\n                <td>{usr.email}</td>\r\n              </tr>\r\n            ))\r\n          : \"Loaging\"}\r\n      </table>  */}\r\n      \r\n    </div>\r\n  );\r\n}\r\n","\nimport './App.css';\nimport DataList from './DataList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     \n      \n       <DataList />\n          \n       \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}